
Projekt 6.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001d0  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000224  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000224  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000254  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000290  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000060c  00000000  00000000  000002b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000577  00000000  00000000  000008bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002d6  00000000  00000000  00000e33  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  0000110c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000031d  00000000  00000000  00001130  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000010  00000000  00000000  0000144d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 e6 00 	jmp	0x1cc	; 0x1cc <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
#define P_C7 !(PINC & (1<<7))


int main(void)
{
	DDRA = 0x00;
  6c:	1a ba       	out	0x1a, r1	; 26
	DDRC =  0x00;
  6e:	14 ba       	out	0x14, r1	; 20
	PORTC = 0xFF;
  70:	8f ef       	ldi	r24, 0xFF	; 255
  72:	85 bb       	out	0x15, r24	; 21
	DDRD = 0xFF;
  74:	81 bb       	out	0x11, r24	; 17

	TCCR1A = 0b10100011;
  76:	83 ea       	ldi	r24, 0xA3	; 163
  78:	8f bd       	out	0x2f, r24	; 47
	TCCR1B = 0b00011010;
  7a:	8a e1       	ldi	r24, 0x1A	; 26
  7c:	8e bd       	out	0x2e, r24	; 46
	OCR1A = 39999;
  7e:	8f e3       	ldi	r24, 0x3F	; 63
  80:	9c e9       	ldi	r25, 0x9C	; 156
  82:	9b bd       	out	0x2b, r25	; 43
  84:	8a bd       	out	0x2a, r24	; 42

	int x;
    while (1) 
    {
	
	if (P_C0) x=0;
  86:	98 99       	sbic	0x13, 0	; 19
  88:	02 c0       	rjmp	.+4      	; 0x8e <main+0x22>
  8a:	c0 e0       	ldi	r28, 0x00	; 0
  8c:	d0 e0       	ldi	r29, 0x00	; 0
	if (P_C1) x=1;
  8e:	99 99       	sbic	0x13, 1	; 19
  90:	02 c0       	rjmp	.+4      	; 0x96 <main+0x2a>
  92:	c1 e0       	ldi	r28, 0x01	; 1
  94:	d0 e0       	ldi	r29, 0x00	; 0
	if (P_C2) x=2;
  96:	9a 99       	sbic	0x13, 2	; 19
  98:	02 c0       	rjmp	.+4      	; 0x9e <main+0x32>
  9a:	c2 e0       	ldi	r28, 0x02	; 2
  9c:	d0 e0       	ldi	r29, 0x00	; 0
	if (P_C3) x=3;
  9e:	9b 99       	sbic	0x13, 3	; 19
  a0:	02 c0       	rjmp	.+4      	; 0xa6 <main+0x3a>
  a2:	c3 e0       	ldi	r28, 0x03	; 3
  a4:	d0 e0       	ldi	r29, 0x00	; 0
	if (P_C4) x=4;
  a6:	9c 99       	sbic	0x13, 4	; 19
  a8:	02 c0       	rjmp	.+4      	; 0xae <main+0x42>
  aa:	c4 e0       	ldi	r28, 0x04	; 4
  ac:	d0 e0       	ldi	r29, 0x00	; 0
	if (P_C5) x=5;
  ae:	9d 99       	sbic	0x13, 5	; 19
  b0:	02 c0       	rjmp	.+4      	; 0xb6 <main+0x4a>
  b2:	c5 e0       	ldi	r28, 0x05	; 5
  b4:	d0 e0       	ldi	r29, 0x00	; 0
	if (P_C6) x=6;
  b6:	9e 99       	sbic	0x13, 6	; 19
  b8:	02 c0       	rjmp	.+4      	; 0xbe <main+0x52>
  ba:	c6 e0       	ldi	r28, 0x06	; 6
  bc:	d0 e0       	ldi	r29, 0x00	; 0
	if (P_C7) x=7;
  be:	9f 99       	sbic	0x13, 7	; 19
  c0:	02 c0       	rjmp	.+4      	; 0xc6 <main+0x5a>
  c2:	c7 e0       	ldi	r28, 0x07	; 7
  c4:	d0 e0       	ldi	r29, 0x00	; 0


	
		if (x==0)
  c6:	20 97       	sbiw	r28, 0x00	; 0
  c8:	21 f4       	brne	.+8      	; 0xd2 <main+0x66>
		{
			OCR1B = 1999;
  ca:	8f ec       	ldi	r24, 0xCF	; 207
  cc:	97 e0       	ldi	r25, 0x07	; 7
  ce:	99 bd       	out	0x29, r25	; 41
  d0:	88 bd       	out	0x28, r24	; 40
		}
		if (x==1)
  d2:	c1 30       	cpi	r28, 0x01	; 1
  d4:	d1 05       	cpc	r29, r1
  d6:	21 f4       	brne	.+8      	; 0xe0 <main+0x74>
		{
			OCR1B = 2333;
  d8:	8d e1       	ldi	r24, 0x1D	; 29
  da:	99 e0       	ldi	r25, 0x09	; 9
  dc:	99 bd       	out	0x29, r25	; 41
  de:	88 bd       	out	0x28, r24	; 40
		}
		if (x==2)
  e0:	c2 30       	cpi	r28, 0x02	; 2
  e2:	d1 05       	cpc	r29, r1
  e4:	21 f4       	brne	.+8      	; 0xee <main+0x82>
		{
			OCR1B = 2666;
  e6:	8a e6       	ldi	r24, 0x6A	; 106
  e8:	9a e0       	ldi	r25, 0x0A	; 10
  ea:	99 bd       	out	0x29, r25	; 41
  ec:	88 bd       	out	0x28, r24	; 40
		}
		if (x==3)
  ee:	c3 30       	cpi	r28, 0x03	; 3
  f0:	d1 05       	cpc	r29, r1
  f2:	21 f4       	brne	.+8      	; 0xfc <main+0x90>
		{
			OCR1B = 2999;
  f4:	87 eb       	ldi	r24, 0xB7	; 183
  f6:	9b e0       	ldi	r25, 0x0B	; 11
  f8:	99 bd       	out	0x29, r25	; 41
  fa:	88 bd       	out	0x28, r24	; 40
		}
		if (x==4)
  fc:	c4 30       	cpi	r28, 0x04	; 4
  fe:	d1 05       	cpc	r29, r1
 100:	21 f4       	brne	.+8      	; 0x10a <main+0x9e>
		{
			OCR1B = 3333;
 102:	85 e0       	ldi	r24, 0x05	; 5
 104:	9d e0       	ldi	r25, 0x0D	; 13
 106:	99 bd       	out	0x29, r25	; 41
 108:	88 bd       	out	0x28, r24	; 40
		}
		if (x==5)
 10a:	c5 30       	cpi	r28, 0x05	; 5
 10c:	d1 05       	cpc	r29, r1
 10e:	21 f4       	brne	.+8      	; 0x118 <main+0xac>
		{
			OCR1B = 3666;
 110:	82 e5       	ldi	r24, 0x52	; 82
 112:	9e e0       	ldi	r25, 0x0E	; 14
 114:	99 bd       	out	0x29, r25	; 41
 116:	88 bd       	out	0x28, r24	; 40
		}
		if (x==6)
 118:	c6 30       	cpi	r28, 0x06	; 6
 11a:	d1 05       	cpc	r29, r1
 11c:	21 f4       	brne	.+8      	; 0x126 <main+0xba>
		{
			OCR1B = 3999;
 11e:	8f e9       	ldi	r24, 0x9F	; 159
 120:	9f e0       	ldi	r25, 0x0F	; 15
 122:	99 bd       	out	0x29, r25	; 41
 124:	88 bd       	out	0x28, r24	; 40
		}
		if (x==7)
 126:	c7 30       	cpi	r28, 0x07	; 7
 128:	d1 05       	cpc	r29, r1
 12a:	09 f0       	breq	.+2      	; 0x12e <main+0xc2>
 12c:	ac cf       	rjmp	.-168    	; 0x86 <main+0x1a>
		{

			ADMUX = 0b01000000;
 12e:	80 e4       	ldi	r24, 0x40	; 64
 130:	87 b9       	out	0x07, r24	; 7
			ADCSRA = 0b11000111;
 132:	87 ec       	ldi	r24, 0xC7	; 199
 134:	86 b9       	out	0x06, r24	; 6
			
			while (ADCSRA & 0b01000000);
 136:	36 99       	sbic	0x06, 6	; 6
 138:	fe cf       	rjmp	.-4      	; 0x136 <main+0xca>
			OCR1B = ADC*4000UL/1023;
 13a:	24 b1       	in	r18, 0x04	; 4
 13c:	35 b1       	in	r19, 0x05	; 5
 13e:	a0 ea       	ldi	r26, 0xA0	; 160
 140:	bf e0       	ldi	r27, 0x0F	; 15
 142:	0e 94 d7 00 	call	0x1ae	; 0x1ae <__umulhisi3>
 146:	2f ef       	ldi	r18, 0xFF	; 255
 148:	33 e0       	ldi	r19, 0x03	; 3
 14a:	40 e0       	ldi	r20, 0x00	; 0
 14c:	50 e0       	ldi	r21, 0x00	; 0
 14e:	0e 94 b5 00 	call	0x16a	; 0x16a <__udivmodsi4>
 152:	39 bd       	out	0x29, r19	; 41
 154:	28 bd       	out	0x28, r18	; 40
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 156:	2f ef       	ldi	r18, 0xFF	; 255
 158:	80 e7       	ldi	r24, 0x70	; 112
 15a:	92 e0       	ldi	r25, 0x02	; 2
 15c:	21 50       	subi	r18, 0x01	; 1
 15e:	80 40       	sbci	r24, 0x00	; 0
 160:	90 40       	sbci	r25, 0x00	; 0
 162:	e1 f7       	brne	.-8      	; 0x15c <main+0xf0>
 164:	00 c0       	rjmp	.+0      	; 0x166 <main+0xfa>
 166:	00 00       	nop
 168:	8e cf       	rjmp	.-228    	; 0x86 <main+0x1a>

0000016a <__udivmodsi4>:
 16a:	a1 e2       	ldi	r26, 0x21	; 33
 16c:	1a 2e       	mov	r1, r26
 16e:	aa 1b       	sub	r26, r26
 170:	bb 1b       	sub	r27, r27
 172:	fd 01       	movw	r30, r26
 174:	0d c0       	rjmp	.+26     	; 0x190 <__udivmodsi4_ep>

00000176 <__udivmodsi4_loop>:
 176:	aa 1f       	adc	r26, r26
 178:	bb 1f       	adc	r27, r27
 17a:	ee 1f       	adc	r30, r30
 17c:	ff 1f       	adc	r31, r31
 17e:	a2 17       	cp	r26, r18
 180:	b3 07       	cpc	r27, r19
 182:	e4 07       	cpc	r30, r20
 184:	f5 07       	cpc	r31, r21
 186:	20 f0       	brcs	.+8      	; 0x190 <__udivmodsi4_ep>
 188:	a2 1b       	sub	r26, r18
 18a:	b3 0b       	sbc	r27, r19
 18c:	e4 0b       	sbc	r30, r20
 18e:	f5 0b       	sbc	r31, r21

00000190 <__udivmodsi4_ep>:
 190:	66 1f       	adc	r22, r22
 192:	77 1f       	adc	r23, r23
 194:	88 1f       	adc	r24, r24
 196:	99 1f       	adc	r25, r25
 198:	1a 94       	dec	r1
 19a:	69 f7       	brne	.-38     	; 0x176 <__udivmodsi4_loop>
 19c:	60 95       	com	r22
 19e:	70 95       	com	r23
 1a0:	80 95       	com	r24
 1a2:	90 95       	com	r25
 1a4:	9b 01       	movw	r18, r22
 1a6:	ac 01       	movw	r20, r24
 1a8:	bd 01       	movw	r22, r26
 1aa:	cf 01       	movw	r24, r30
 1ac:	08 95       	ret

000001ae <__umulhisi3>:
 1ae:	a2 9f       	mul	r26, r18
 1b0:	b0 01       	movw	r22, r0
 1b2:	b3 9f       	mul	r27, r19
 1b4:	c0 01       	movw	r24, r0
 1b6:	a3 9f       	mul	r26, r19
 1b8:	70 0d       	add	r23, r0
 1ba:	81 1d       	adc	r24, r1
 1bc:	11 24       	eor	r1, r1
 1be:	91 1d       	adc	r25, r1
 1c0:	b2 9f       	mul	r27, r18
 1c2:	70 0d       	add	r23, r0
 1c4:	81 1d       	adc	r24, r1
 1c6:	11 24       	eor	r1, r1
 1c8:	91 1d       	adc	r25, r1
 1ca:	08 95       	ret

000001cc <_exit>:
 1cc:	f8 94       	cli

000001ce <__stop_program>:
 1ce:	ff cf       	rjmp	.-2      	; 0x1ce <__stop_program>
